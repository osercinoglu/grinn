# Legacy gRINN Dockerfile for GROMACS 2020.7
# Uses Ubuntu 20.04 for compatibility with older GCC/libraries
# 
# Usage:
#   docker build -f Dockerfile.gromacs-2020.7 -t grinn:gromacs-2020.7 .

    echo '    "workflow")' >> /app/entrypoint.sh && \
    echo '        shift' >> /app/entrypoint.sh && \
    echo '        echo "🧬 Starting gRINN Workflow with GROMACS 2020.7..."' >> /app/entrypoint.sh && \
    echo '        # Enable real-time output with multiple techniques' >> /app/entrypoint.sh && \
    echo '        export PYTHONUNBUFFERED=1' >> /app/entrypoint.sh && \
    echo '        export PYTHONIOENCODING=utf-8' >> /app/entrypoint.sh && \
    echo '        stdbuf -oL -eL conda run -n grinn-env python -u grinn_workflow.py "$@"' >> /app/entrypoint.sh && \
    echo '        ;;' >> /app/entrypoint.sh && \
    echo '    "dashboard")' >> /app/entrypoint.sh && \
    echo '        shift' >> /app/entrypoint.sh && \
    echo '        echo "📊 Starting gRINN Dashboard with GROMACS 2020.7..."' >> /app/entrypoint.sh && \
    echo '        # Enable real-time output with multiple techniques' >> /app/entrypoint.sh && \
    echo '        export PYTHONUNBUFFERED=1' >> /app/entrypoint.sh && \
    echo '        export PYTHONIOENCODING=utf-8' >> /app/entrypoint.sh && \
    echo '        stdbuf -oL -eL conda run -n grinn-env python -u gRINN_Dashboard/grinn_dashboard.py "$@"' >> /app/entrypoint.sh && \
    echo '        ;;' >> /app/entrypoint.sh &&====================================================================
# STAGE 1: GROMACS 2020.7 Builder (Ubuntu 20.04)
# ============================================================================

FROM ubuntu:20.04 as gromacs-builder

# Prevent interactive prompts
ENV DEBIAN_FRONTEND=noninteractive

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    wget \
    libfftw3-dev \
    libopenmpi-dev \
    libhwloc-dev \
    libblas-dev \
    liblapack-dev \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Download and build GROMACS 2020.7
ARG GROMACS_VERSION=2020.7
WORKDIR /tmp/gromacs-build

RUN echo "🔬 Building GROMACS ${GROMACS_VERSION} on Ubuntu 20.04" && \
    wget ftp://ftp.gromacs.org/gromacs/gromacs-${GROMACS_VERSION}.tar.gz && \
    tar xfz gromacs-${GROMACS_VERSION}.tar.gz && \
    cd gromacs-${GROMACS_VERSION} && \
    mkdir build && \
    cd build && \
    cmake .. \
        -DGMX_BUILD_OWN_FFTW=ON \
        -DGMX_GPU=OFF \
        -DGMX_MPI=OFF \
        -DCMAKE_INSTALL_PREFIX=/usr/local/gromacs \
        -DCMAKE_BUILD_TYPE=Release \
        -DGMX_USE_OPENCL=OFF && \
    make -j$(nproc) && \
    make install && \
    cd / && rm -rf /tmp/gromacs-build && \
    echo "✅ GROMACS ${GROMACS_VERSION} built successfully"

# ============================================================================
# STAGE 2: Python Environment (Ubuntu 20.04)
# ============================================================================

FROM ubuntu:20.04 as python-env

# Prevent interactive prompts
ENV DEBIAN_FRONTEND=noninteractive

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    python3-dev \
    libfftw3-3 \
    libopenmpi3 \
    libhwloc15 \
    libblas3 \
    liblapack3 \
    wget \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create symlink for python
RUN ln -s /usr/bin/python3 /usr/bin/python

# Install Miniconda
RUN ARCH=$(uname -m) && \
    if [ "$ARCH" = "aarch64" ] || [ "$ARCH" = "arm64" ]; then \
        MINICONDA_ARCH="aarch64"; \
    else \
        MINICONDA_ARCH="x86_64"; \
    fi && \
    wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-${MINICONDA_ARCH}.sh -O /tmp/miniconda.sh && \
    bash /tmp/miniconda.sh -b -p /opt/conda && \
    rm /tmp/miniconda.sh

ENV PATH=/opt/conda/bin:$PATH

# Configure conda channels
RUN conda config --set channel_priority strict && \
    conda config --add channels conda-forge && \
    conda config --add channels bioconda && \
    conda config --add channels plotly

# Accept conda Terms of Service
RUN conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/main && \
    conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/r && \
    conda tos accept --override-channels --channel conda-forge

# Install mamba
RUN conda install -y -c conda-forge mamba

# Create conda environment with gRINN dependencies
RUN mamba create -y -n grinn-env -c conda-forge -c bioconda -c plotly \
    python=3.10 \
    pdbfixer \
    prody \
    numpy \
    scipy \
    pyprind \
    pandas \
    mdtraj \
    openmm \
    panedr \
    gromacswrapper \
    networkx \
    tqdm \
    dash \
    dash-bootstrap-components \
    plotly \
    biotite 

# Install dash-molstar
RUN conda run -n grinn-env pip install dash-molstar

# Copy GROMACS installation
COPY --from=gromacs-builder /usr/local/gromacs /usr/local/gromacs

# Set GROMACS environment
ENV PATH="/usr/local/gromacs/bin:$PATH"
ENV LD_LIBRARY_PATH="/usr/local/gromacs/lib:$LD_LIBRARY_PATH"

# ============================================================================
# STAGE 3: Final gRINN Application (rebuilds when code changes)
# ============================================================================

FROM python-env as final

# Build arguments for file paths
ARG GRINN_PREFIX=""

# Add labels
LABEL maintainer="gRINN Team"
LABEL gromacs.version="2020.7"
LABEL description="gRINN molecular dynamics analysis with GROMACS 2020.7 (Ubuntu 20.04)"

# Set working directory
WORKDIR /app

# Set Python environment variables for real-time output in Docker containers
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONIOENCODING=utf-8

# Set GROMACS environment
ENV GMX_MAXBACKUP=-1
ENV GMXRC_PATH=/usr/local/gromacs/bin/GMXRC

# Shell configuration
SHELL ["/bin/bash", "-c"]

# Set up GromacsWrapper config
RUN conda run -n grinn-env python -c "import gromacs; gromacs.config.setup()"

# Copy MDP files
COPY ${GRINN_PREFIX}mdp_files ./mdp_files

# Copy gRINN source code and dashboard
COPY ${GRINN_PREFIX}grinn_workflow.py ./
COPY ${GRINN_PREFIX}gRINN_Dashboard ./gRINN_Dashboard

# Make executable
RUN chmod +x grinn_workflow.py

# Create entrypoint script
RUN echo '#!/bin/bash' > /app/entrypoint.sh && \
    echo '' >> /app/entrypoint.sh && \
    echo 'show_usage() {' >> /app/entrypoint.sh && \
    echo '    echo "gRINN Docker Container - GROMACS 2020.7 (Legacy)"' >> /app/entrypoint.sh && \
    echo '    echo ""' >> /app/entrypoint.sh && \
    echo '    echo "  docker run [options] grinn:gromacs-2020.7 <mode> [args]"' >> /app/entrypoint.sh && \
    echo '    echo ""' >> /app/entrypoint.sh && \
    echo '    echo "Available modes:"' >> /app/entrypoint.sh && \
    echo '    echo "  workflow <input.pdb> <output_dir> [options]"' >> /app/entrypoint.sh && \
    echo '    echo "  dashboard <results_folder>"' >> /app/entrypoint.sh && \
    echo '    echo "  gmx <command> [options]"' >> /app/entrypoint.sh && \
    echo '    echo "  bash"' >> /app/entrypoint.sh && \
    echo '    echo "  help"' >> /app/entrypoint.sh && \
    echo '}' >> /app/entrypoint.sh && \
    echo '' >> /app/entrypoint.sh && \
    echo 'source $GMXRC_PATH' >> /app/entrypoint.sh && \
    echo '' >> /app/entrypoint.sh && \
    echo 'case "$1" in' >> /app/entrypoint.sh && \
    echo '    "workflow")' >> /app/entrypoint.sh && \
    echo '        shift' >> /app/entrypoint.sh && \
    echo '        echo "🧬 Starting gRINN Workflow with GROMACS 2020.7..."' >> /app/entrypoint.sh && \
    echo '        conda run -n grinn-env python -u grinn_workflow.py "$@"' >> /app/entrypoint.sh && \
    echo '        ;;' >> /app/entrypoint.sh && \
    echo '    "dashboard")' >> /app/entrypoint.sh && \
    echo '        shift' >> /app/entrypoint.sh && \
    echo '        echo "📊 Starting gRINN Dashboard with GROMACS 2020.7..."' >> /app/entrypoint.sh && \
    echo '        conda run -n grinn-env python -u gRINN_Dashboard/grinn_dashboard.py "$@"' >> /app/entrypoint.sh && \
    echo '        ;;' >> /app/entrypoint.sh && \
    echo '    "gmx")' >> /app/entrypoint.sh && \
    echo '        shift' >> /app/entrypoint.sh && \
    echo '        echo "⚗️  Running GROMACS 2020.7: gmx $@"' >> /app/entrypoint.sh && \
    echo '        # Enable real-time output for GROMACS commands' >> /app/entrypoint.sh && \
    echo '        stdbuf -oL -eL gmx "$@"' >> /app/entrypoint.sh && \
    echo '        ;;' >> /app/entrypoint.sh && \
    echo '    "bash")' >> /app/entrypoint.sh && \
    echo '        echo "🐚 Starting bash session (GROMACS 2020.7)..."' >> /app/entrypoint.sh && \
    echo '        exec /bin/bash' >> /app/entrypoint.sh && \
    echo '        ;;' >> /app/entrypoint.sh && \
    echo '    "help"|"--help"|"-h")' >> /app/entrypoint.sh && \
    echo '        show_usage' >> /app/entrypoint.sh && \
    echo '        ;;' >> /app/entrypoint.sh && \
    echo '    "")' >> /app/entrypoint.sh && \
    echo '        echo "❌ No execution mode specified"' >> /app/entrypoint.sh && \
    echo '        show_usage' >> /app/entrypoint.sh && \
    echo '        exit 1' >> /app/entrypoint.sh && \
    echo '        ;;' >> /app/entrypoint.sh && \
    echo '    *)' >> /app/entrypoint.sh && \
    echo '        echo "❌ Unknown mode: $1"' >> /app/entrypoint.sh && \
    echo '        show_usage' >> /app/entrypoint.sh && \
    echo '        exit 1' >> /app/entrypoint.sh && \
    echo '        ;;' >> /app/entrypoint.sh && \
    echo 'esac' >> /app/entrypoint.sh && \
    chmod +x /app/entrypoint.sh

# Verify GROMACS installation
RUN gmx --version

# Expose port for dashboard
EXPOSE 8050

ENTRYPOINT ["/app/entrypoint.sh"]
