FROM ubuntu:22.04 as base

# Accept GROMACS version as build argument
ARG GROMACS_VERSION=2024.1

# System dependencies
RUN apt-get update && \
    apt-get install -y wget git build-essential cmake sudo python3 python3-pip curl && \
    rm -rf /var/lib/apt/lists/*

# Install Miniconda and Mamba
RUN ARCH=$(uname -m) && \
    if [ "$ARCH" = "aarch64" ] || [ "$ARCH" = "arm64" ]; then \
        MINICONDA_ARCH="aarch64"; \
    else \
        MINICONDA_ARCH="x86_64"; \
    fi && \
    wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-${MINICONDA_ARCH}.sh -O /tmp/miniconda.sh && \
    bash /tmp/miniconda.sh -b -p /opt/conda && \
    rm /tmp/miniconda.sh
ENV PATH=/opt/conda/bin:$PATH

# Accept conda Terms of Service for default channels
RUN conda config --set channel_priority strict && \
    conda config --add channels conda-forge && \
    conda config --add channels bioconda && \
    conda config --add channels plotly && \
    echo "yes" | conda tos accept

RUN conda install -y -c conda-forge mamba

# Create environment with all dependencies including dashboard
RUN mamba create -y -n grinn-env -c conda-forge -c bioconda -c plotly \
    python=3.10 \
    pdbfixer \
    prody \
    numpy \
    scipy \
    pyprind \
    pandas \
    mdtraj \
    openmm \
    panedr \
    gromacswrapper \
    networkx \
    tqdm \
    dash \
    dash-bootstrap-components \
    plotly

# Install dash-molstar for 3D visualization
RUN conda run -n grinn-env pip install dash-molstar

# GROMACS build stage
FROM base as gromacs-builder
ARG GROMACS_VERSION
WORKDIR /tmp

# Download and build GROMACS with version parameter
RUN echo "Building GROMACS version: ${GROMACS_VERSION}" && \
    wget ftp://ftp.gromacs.org/gromacs/gromacs-${GROMACS_VERSION}.tar.gz && \
    tar xfz gromacs-${GROMACS_VERSION}.tar.gz && \
    cd gromacs-${GROMACS_VERSION} && \
    mkdir build && \
    cd build && \
    cmake .. -DGMX_BUILD_OWN_FFTW=ON -DREGRESSIONTEST_DOWNLOAD=ON -DCMAKE_INSTALL_PREFIX=/usr/local/gromacs && \
    make -j$(nproc) && \
    make check && \
    make install && \
    cd / && \
    rm -rf /tmp/gromacs-${GROMACS_VERSION}*

# Final stage - combine base with GROMACS
FROM base as final

# Copy GROMACS installation from builder stage
COPY --from=gromacs-builder /usr/local/gromacs /usr/local/gromacs

# Install gsutil from Google Cloud SDK (system Python)
RUN apt-get update && \
    apt-get install -y curl apt-transport-https ca-certificates gnupg && \
    echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && \
    curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - && \
    apt-get update && \
    apt-get install -y google-cloud-sdk

# Set up working directory
WORKDIR /app

# Set environment variables for GROMACS
ENV PATH="/usr/local/gromacs/bin:$PATH"
ENV GMX_MAXBACKUP=-1

# Activate conda env and source GMXRC for all future RUN/CMD
SHELL ["/bin/bash", "-c"]

ENV GMXRC_PATH=/usr/local/gromacs/bin/GMXRC

# Set up GromacsWrapper config in root's home
RUN conda run -n grinn-env python -c "import gromacs; gromacs.config.setup()"

# Download test data from public Google Cloud Storage bucket (do this before copying code)
RUN gsutil -m cp -r gs://grinn-test-data/* $PWD

# Force cache invalidation for development builds
ARG CACHEBUST=1

# Copy MDP files first (these change less frequently)
COPY mdp_files ./mdp_files

# DEVELOPMENT VERSION: Skip tests during build for faster iteration
# Copy your code and dashboard (these change more frequently)
COPY grinn_workflow.py ./
COPY gRINN_Dashboard ./gRINN_Dashboard

# Copy test script but don't run it during build
COPY test.sh ./
RUN chmod +x test.sh

# Create a sophisticated entrypoint script to handle multiple execution modes
RUN echo '#!/bin/bash' > /app/entrypoint.sh && \
    echo '' >> /app/entrypoint.sh && \
    echo '# Function to show usage' >> /app/entrypoint.sh && \
    echo 'show_usage() {' >> /app/entrypoint.sh && \
    echo '    echo "gRINN Docker Container - Usage:"' >> /app/entrypoint.sh && \
    echo '    echo ""' >> /app/entrypoint.sh && \
    echo '    echo "  docker run [docker-options] grinn-dev <mode> [mode-options]"' >> /app/entrypoint.sh && \
    echo '    echo ""' >> /app/entrypoint.sh && \
    echo '    echo "Available modes:"' >> /app/entrypoint.sh && \
    echo '    echo "  workflow <input.pdb> <output_dir> [options]  - Run gRINN workflow analysis"' >> /app/entrypoint.sh && \
    echo '    echo "  dashboard <results_folder>                  - Launch interactive dashboard"' >> /app/entrypoint.sh && \
    echo '    echo "  gmx <gmx_command> [gmx_options]             - Run GROMACS commands"' >> /app/entrypoint.sh && \
    echo '    echo "  bash                                        - Start interactive bash session"' >> /app/entrypoint.sh && \
    echo '    echo "  help                                        - Show this help message"' >> /app/entrypoint.sh && \
    echo '    echo ""' >> /app/entrypoint.sh && \
    echo '    echo "Examples:"' >> /app/entrypoint.sh && \
    echo '    echo "  docker run -v /data:/data grinn-dev workflow /data/protein.pdb /data/results --top /data/protein.top"' >> /app/entrypoint.sh && \
    echo '    echo "  docker run -p 8051:8051 -v /data:/data grinn-dev dashboard /data/results"' >> /app/entrypoint.sh && \
    echo '    echo "  docker run -v /data:/data grinn-dev gmx grompp -f /data/input.mdp -c /data/protein.pdb"' >> /app/entrypoint.sh && \
    echo '    echo "  docker run -it grinn-dev bash"' >> /app/entrypoint.sh && \
    echo '}' >> /app/entrypoint.sh && \
    echo '' >> /app/entrypoint.sh && \
    echo '# Source GROMACS environment' >> /app/entrypoint.sh && \
    echo 'source $GMXRC_PATH' >> /app/entrypoint.sh && \
    echo '' >> /app/entrypoint.sh && \
    echo '# Handle different execution modes' >> /app/entrypoint.sh && \
    echo 'case "$1" in' >> /app/entrypoint.sh && \
    echo '    "workflow")' >> /app/entrypoint.sh && \
    echo '        shift' >> /app/entrypoint.sh && \
    echo '        echo "🧬 Starting gRINN Workflow Analysis..."' >> /app/entrypoint.sh && \
    echo '        echo "Arguments: $@"' >> /app/entrypoint.sh && \
    echo '        conda run -n grinn-env python grinn_workflow.py "$@"' >> /app/entrypoint.sh && \
    echo '        ;;' >> /app/entrypoint.sh && \
    echo '    "dashboard")' >> /app/entrypoint.sh && \
    echo '        shift' >> /app/entrypoint.sh && \
    echo '        echo "📊 Starting gRINN Dashboard..."' >> /app/entrypoint.sh && \
    echo '        echo "Dashboard will be available at http://localhost:8051"' >> /app/entrypoint.sh && \
    echo '        echo "Results folder: $1"' >> /app/entrypoint.sh && \
    echo '        conda run -n grinn-env python gRINN_Dashboard/grinn_dashboard.py "$@"' >> /app/entrypoint.sh && \
    echo '        ;;' >> /app/entrypoint.sh && \
    echo '    "gmx")' >> /app/entrypoint.sh && \
    echo '        shift' >> /app/entrypoint.sh && \
    echo '        echo "⚗️  Running GROMACS command: gmx $@"' >> /app/entrypoint.sh && \
    echo '        gmx "$@"' >> /app/entrypoint.sh && \
    echo '        ;;' >> /app/entrypoint.sh && \
    echo '    "bash")' >> /app/entrypoint.sh && \
    echo '        echo "🐚 Starting interactive bash session..."' >> /app/entrypoint.sh && \
    echo '        echo "GROMACS environment is already sourced"' >> /app/entrypoint.sh && \
    echo '        echo "Conda environment: grinn-env"' >> /app/entrypoint.sh && \
    echo '        echo "To activate conda env: conda activate grinn-env"' >> /app/entrypoint.sh && \
    echo '        exec /bin/bash' >> /app/entrypoint.sh && \
    echo '        ;;' >> /app/entrypoint.sh && \
    echo '    "help"|"--help"|"-h")' >> /app/entrypoint.sh && \
    echo '        show_usage' >> /app/entrypoint.sh && \
    echo '        ;;' >> /app/entrypoint.sh && \
    echo '    "")' >> /app/entrypoint.sh && \
    echo '        echo "❌ Error: No execution mode specified"' >> /app/entrypoint.sh && \
    echo '        echo ""' >> /app/entrypoint.sh && \
    echo '        show_usage' >> /app/entrypoint.sh && \
    echo '        exit 1' >> /app/entrypoint.sh && \
    echo '        ;;' >> /app/entrypoint.sh && \
    echo '    *)' >> /app/entrypoint.sh && \
    echo '        echo "❌ Error: Unknown execution mode: $1"' >> /app/entrypoint.sh && \
    echo '        echo ""' >> /app/entrypoint.sh && \
    echo '        show_usage' >> /app/entrypoint.sh && \
    echo '        exit 1' >> /app/entrypoint.sh && \
    echo '        ;;' >> /app/entrypoint.sh && \
    echo 'esac' >> /app/entrypoint.sh && \
    chmod +x /app/entrypoint.sh

# Expose port for dashboard
EXPOSE 8051

ENTRYPOINT ["/app/entrypoint.sh"]
